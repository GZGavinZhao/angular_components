[{"displayName":"App Layout","group":null,"docs":[{"docType":"DocType.markdownDocInfo","name":"README","path":"angular_components/lib/app_layout/README.md","contents":"<h1>App Layout</h1>\n<p>App layout is a system of styles, directives, and components that when used\ntogether can give a material look and feel to the scafolding of your\napplication. It provides an App Bar, Drawers, and Navigation styling following\nthe material spec.</p>\n<h2>Setup</h2>\n<p>The styles are provided by\n<code>package:angular_components/app_layout/layout.scss.css</code>. To use these styles in\nan angular component simply add it as a <code>styleUrls</code> value in your <code>Component</code>\nannotation. It is suggested that the style is added before any component\nspecific styling so you can easily override style values as needed.</p>\n<pre><code class=\"language-dart\">@Component(\n    selector: 'my-component',\n    templateUrl: 'my_component.html',\n    styleUrls: const [\n      'package:angular_components/app_layout/layout.scss.css',\n      'my_component.scss.css'])\nclass MyComponent {}\n</code></pre>\n<h2>App Bar</h2>\n<p>An app bar has the following classes which can be used together to create a\nheader:</p><!-- mdformat off(Basic table formatting for GitHub markdown compatibility) --><table><thead><tr><th>Class</th><th>Description</th></tr></thead><tbody><tr><td><strong>material-header</strong></td><td>Container element for the header.</td></tr><tr><td>shadow</td><td>Modifier on material-header to apply a shadow to the <br>header.</td></tr><tr><td>dense-header</td><td>Makes the App Bar denser for interfaces that primarily <br>use mouse and keyboard.</td></tr><tr><td><strong>material-header-row</strong></td><td>A row within the header.</td></tr><tr><td>material-drawer-button</td><td>A button within the row that is placed on the left and <br>is used for navigation.</td></tr><tr><td>material-header-title</td><td>A title for the header.</td></tr><tr><td>material-spacer</td><td>Consumes space between the title and any navigation <br>links. Needs to be placed after the title and before <br>any navigation elements.</td></tr><tr><td>material-navigation</td><td>Navigation elements which will be displayed on the <br>left side of the header. Only use with anchor tags, <br>material-button have there own styling built in.</td></tr></tbody></table><!-- mdformat on -->\n<p>Here is an example:</p>\n<pre><code class=\"language-html\">&lt;header class=\"material-header\"&gt;\n  &lt;div class=\"material-header-row\"&gt;\n    &lt;material-button icon\n        class=\"material-drawer-button\" (trigger)=\"drawer.toggle()\"&gt;\n      &lt;material-icon icon=\"menu\"&gt;&lt;/material-icon&gt;\n    &lt;/material-button&gt;\n    &lt;span class=\"material-header-title\"&gt;Simple Layout&lt;/span&gt;\n    &lt;div class=\"material-spacer\"&gt;&lt;/div&gt;\n    &lt;nav class=\"material-navigation\"&gt;\n      &lt;a&gt;Link 1&lt;/a&gt;\n    &lt;/nav&gt;\n    &lt;nav class=\"material-navigation\"&gt;\n      &lt;a&gt;Link 2&lt;/a&gt;\n    &lt;/nav&gt;\n    &lt;nav class=\"material-navigation\"&gt;\n      &lt;a&gt;Link 3&lt;/a&gt;\n    &lt;/nav&gt;\n  &lt;/div&gt;\n&lt;/header&gt;\n</code></pre>\n<p><img src=\"https://raw.githubusercontent.com/dart-lang/angular_components/master/angular_components/lib/app_layout/g3doc/simple_app_bar.png\" alt=\"Simple App Bar\" /></p>\n<h2>Drawers</h2>\n<p>There are three kinds of drawers that are available: <em>permanent</em>, <em>persistent</em>,\nand <em>temporary</em>. All drawers are instantiated by the <code>material-drawer</code> element.\nThese drawers are implemented differently to provide the best performance for\neach. For the main content outside of the drawer wrap it in a <code>material-content</code>\nelement, or a element with the class <code>material-content</code>.</p>\n<h3>Permanent Drawers</h3>\n<p>Permanent drawers are drawers which can't be closed. They are provided purely by\nCSS. To have a permanent drawer add the <code>permanent</code> attribute to the\n<code>material-drawer</code> element. Example:</p>\n<pre><code class=\"language-html\">&lt;material-drawer permanent&gt;\n  &lt;!-- Drawer content here --&gt;\n&lt;/material-drawer&gt;\n&lt;material-content&gt;\n  &lt;!-- Content goes here --&gt;\n&lt;/material-content&gt;\n</code></pre>\n<h3>Persistent Drawers</h3>\n<p>Persistent drawers are drawers which can be open and closed by an action, such\nas a button trigger. These drawers reposition the content to fit in with the\nflow of the drawer. To use a persistent drawer add the <code>persistent</code> attribute to\nthe <code>material-drawer</code> element, and add the <code>MaterialPersistentDrawerDirective</code>\nto the parent's directives list.</p>\n<p>Lastly, connect the open/close drawer action to the drawer. This is most easily\ndone using the <a href=\"https://webdev.dartlang.org/angular/guide/template-syntax#!#ref-vars\">reference\nvariable</a>\nsyntax. The persistent drawer directive exports itself as <code>drawer</code> this allows\nit to be used easily by other actions. <code>toggle()</code> can be used to open/close the\ndrawer. The drawer supports the <code>deferredContent</code> directive allowing a developer\nto add/remove content from the page when the drawer is not visible (closed.)\nHere is a complete example:</p>\n<pre><code class=\"language-html\">&lt;material-drawer persistent #drawer=\"drawer\"&gt;\n  &lt;div *deferredContent&gt;\n    &lt;!-- Drawer content goes here --&gt;\n  &lt;/div&gt;\n&lt;/material-drawer&gt;\n&lt;material-content&gt;\n  &lt;header class=\"material-header shadow\"&gt;\n    &lt;div class=\"material-header-row\"&gt;\n      &lt;!-- This button will toggle (open/close) the drawer --&gt;\n      &lt;material-button icon\n          class=\"material-drawer-button\" (trigger)=\"drawer.toggle()\"&gt;\n        &lt;material-icon icon=\"menu\"&gt;&lt;/material-icon&gt;\n      &lt;/material-button&gt;\n      &lt;!-- Other header info goes here --&gt;\n    &lt;/div&gt;\n  &lt;/header&gt;\n  &lt;div&gt;\n    Content goes here.\n  &lt;/div&gt;\n&lt;/material-content&gt;\n</code></pre>\n<h3>Temporary drawers</h3>\n<p>Temporary drawers are drawers that live on top of the content. They are provided\nby <code>MaterialTemporaryDrawerComponent</code> which has a similar look and feel to the\nother drawers. To use a temporary drawer add the <code>temporary</code> attribute to the\n<code>material-drawer</code> element, and add <code>MaterialTemporaryDrawerComponent</code> to the\nparent's directive list.</p>\n<p>The temporary drawer has an optional <code>overlay</code> attribute which can be used to\nshow a transparent overlay above non-drawer content while the drawer is open.</p>\n<p>Here is an example:</p>\n<pre><code class=\"language-html\">&lt;material-drawer temporary #drawer=\"drawer\" overlay&gt;\n  &lt;div *deferredContent&gt;\n    Here is some drawer content.\n  &lt;/div&gt;\n&lt;/material-drawer&gt;\n&lt;material-content&gt;\n  &lt;header class=\"material-header shadow\"&gt;\n    &lt;div class=\"material-header-row\"&gt;\n      &lt;material-button class=\"material-drawer-button\" icon\n                       (trigger)=\"drawer.toggle()\"&gt;\n        &lt;material-icon icon=\"menu\"&gt;&lt;/material-icon&gt;\n      &lt;/material-button&gt;\n      &lt;span class=\"material-header-title\"&gt;Mobile Layout&lt;/span&gt;\n      &lt;div class=\"material-spacer\"&gt;&lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/header&gt;\n  &lt;!-- Content goes here --&gt;\n&lt;/material-content&gt;\n</code></pre>\n<h3>Displaying the drawer on the opposite side</h3>\n<p>All drawers have an HTML attribute <code>end</code> which positions the drawer on the\nopposite side of the page as normal (right side in LTR, and left side in RTL.)</p>\n<p>Example:</p>\n<pre><code class=\"language-html\">&lt;material-drawer temporary end&gt;\n  &lt;!-- This drawer is going to be on the right side in LTR,\n       left side in RTL. --&gt;\n&lt;/material-drawer&gt;\n</code></pre>\n<h3>App Bar and Drawer interaction</h3>\n<p>The app bar and the drawer work in tandem to provide an overal app layout for an\napplication. The app bar can live both inside, or outside of <code>material-content</code>.\nIf it is inside of <code>material-content</code> it will live with the content and if\napplicable be repositioned with the content. If it is on top of\n<code>material-content</code> the drawer and content will be positioned below the app bar\nfor the <code>permanent</code> and <code>persistent</code> drawers.</p>\n<p>Example:</p>\n<pre><code class=\"language-html\">&lt;header class=\"material-header shadow\"&gt;\n  &lt;div class=\"material-header-row\"&gt;\n    &lt;material-button icon\n        class=\"material-drawer-button\" (trigger)=\"drawer.toggle()\"&gt;\n      &lt;material-icon icon=\"menu\"&gt;&lt;/material-icon&gt;\n    &lt;/material-button&gt;\n    &lt;span class=\"material-header-title\"&gt;Simple Layout&lt;/span&gt;\n    &lt;div class=\"material-spacer\"&gt;&lt;/div&gt;\n    &lt;nav class=\"material-navigation\"&gt;\n      &lt;a&gt;Link 1&lt;/a&gt;\n    &lt;/nav&gt;\n  &lt;/div&gt;\n&lt;/header&gt;\n&lt;material-drawer persistent #drawer=\"drawer\"&gt;\n  &lt;!-- Drawer content here --&gt;\n&lt;/material-drawer&gt;\n&lt;material-content&gt;\n  &lt;!-- Content here --&gt;\n&lt;/material-content&gt;\n</code></pre>\n<h2>Navigation Styles</h2>\n<p>Navigation element styles within the drawer are also provided by app_layout.\nThis is accomplished using the standard <code>material-list</code> component, and some\nspecial CSS classes.</p>\n<p>The top level drawer content should be a <code>MaterialListComponent</code> with optional\ngroup elements which are specified by the <code>group</code> attribute on an element.</p>\n<p>The <code>mat-drawer-spacer</code> CSS class is optional and ensures that if the header is\ninside of <code>material-content</code> then the drawer content will start at the bottom of\nthe header.</p>\n<p>Use <code>MaterialListItemComponent</code>s for the items in your drawer. For each group if\nyou need a label on the group use the <code>label</code> attribute on a block element\ndirectly inside of your group element.</p>\n<p>Here is an example:</p>\n<pre><code class=\"language-html\">&lt;material-drawer permanent&gt;\n  &lt;material-list *deferredContent&gt;\n    &lt;!-- Position the start of the drawer content correctly --&gt;\n    &lt;div group class=\"mat-drawer-spacer\"&gt;&lt;/div&gt;\n    &lt;!-- Here is a group without a label --&gt;\n    &lt;div group&gt;\n      &lt;material-list-item&gt;\n        &lt;material-icon icon=\"inbox\"&gt;&lt;/material-icon&gt;Inbox\n      &lt;/material-list-item&gt;\n      &lt;material-list-item&gt;\n        &lt;material-icon icon=\"star\"&gt;&lt;/material-icon&gt;Star\n      &lt;/material-list-item&gt;\n      &lt;material-list-item&gt;\n        &lt;material-icon icon=\"send\"&gt;&lt;/material-icon&gt;Sent Mail\n      &lt;/material-list-item&gt;\n      &lt;material-list-item&gt;\n        &lt;material-icon icon=\"drafts\"&gt;&lt;/material-icon&gt;Drafts\n      &lt;/material-list-item&gt;\n    &lt;/div&gt;\n    &lt;!-- This group has a label --&gt;\n    &lt;div group&gt;\n      &lt;div label&gt;Tags&lt;/div&gt;\n      &lt;material-list-item&gt;\n        &lt;material-icon icon=\"star\"&gt;&lt;/material-icon&gt;Favorites\n      &lt;/material-list-item&gt;\n    &lt;/div&gt;\n  &lt;/material-list&gt;\n&lt;/material-drawer&gt;\n</code></pre>\n<p>Due to style encapsulation, if the list content isn't directly in a drawer (that\nis, it's wrapped in another component) you'll have to provide the styles above\nusing a mixin.</p>\n<p>Example scss drawer content component:</p>\n<pre><code class=\"language-scss\">@import 'package:angular_components/lib/app_layout/mixins';\n\n:host {\n  @include mat-drawer-list-items;\n}\n</code></pre>\n"},{"docType":"DocType.sassDocInfo","name":"Sass: mixins","path":"angular_components/lib/app_layout/_mixins.scss","libraryDoc":"","variables":[],"functions":[{"name":"-drawer-content","arguments":[{"name":"host","defaultValue":"false"},{"name":"hostSelector","defaultValue":"\"\""},{"name":"drawerSelector","defaultValue":"\"\""}],"restArgument":null,"comment":"<p>Internal function to generate selector for drawer-content.</p>\n<p>Required to allow the temporary and stackable drawers to use the width mixin\nrather than duplicating the styles, which would get out of date.</p><ul><li>  $host encapsulates the styles within :host.</li><li>  $hostSelector appends a selector to the host material-drawer.</li><li>  $drawerSelector appends a selector to .drawer-content.</li></ul>\n"}],"mixins":[{"name":"mat-drawer-width","arguments":[{"name":"width","defaultValue":null}],"restArgument":null,"comment":"<p>Sets width of persitent and permanent material drawers.</p>\n<p>Must be applied to the component itself, e.g.:</p>\n<pre><code class=\"language-scss\">material-drawer {\n  @include mat-drawer-width(512px);\n}\n</code></pre>\n"},{"name":"mat-temporary-drawer-width","arguments":[{"name":"width","defaultValue":null}],"restArgument":"-selector","comment":"<p>Sets width of MaterialTemporaryDrawerComponent and\nMaterialStackableDrawerComponent</p>\n<p>Should be applied to the component itself, e.g.:</p>\n<pre><code class=\"language-scss\">material-drawer[temporary] {\n  @include mat-temporary-drawer-width(512px);\n}\n</code></pre>\n<p>_selector is for internal use only.</p>\n"},{"name":"mat-drawer-list-items","arguments":[],"restArgument":null,"comment":"<p>Adds the mixins that apply the correct styles for material-list items inside\nof material-drawer.</p>\n"}]},{"docType":"DocType.dartDocInfo","name":"MaterialPersistentDrawerDirective","deprecated":false,"deprecatedMessage":null,"selector":"material-drawer[persistent]","exportAs":"drawer","path":"angular_components/lib/app_layout/material_persistent_drawer.dart","comment":"<p>A persistent drawer that can be pinned open or closed.</p>\n<p>Need to include package:angular_components/app_layout/layout.scss.css\nin the list of styleUrls of the containing component.</p>\n<p>Works with deferred content.</p>\n","inputs":[{"annotation":"Input","name":"visible","bindingAlias":null,"type":"bool","comment":"<p>Visibility of the drawer.</p>\n","classPath":"angular_components/lib/app_layout/material_drawer_base.dart","deprecated":false,"deprecatedMessage":null}],"outputs":[{"annotation":"Output","name":"contentVisible","bindingAlias":"visibleChange","type":"Stream<bool>","comment":"<p>Event fired when the visibility of the drawer changes.</p>\n<p>Note: does not fire until after the animation is complete.</p>\n","classPath":"angular_components/lib/app_layout/material_drawer_base.dart","deprecated":false,"deprecatedMessage":null}]},{"docType":"DocType.dartDocInfo","name":"MaterialTemporaryDrawerComponent","deprecated":false,"deprecatedMessage":null,"selector":"material-drawer[temporary]","exportAs":"drawer","path":"angular_components/lib/app_layout/material_temporary_drawer.dart","comment":"<p>A temporary drawer that can be opened and closed.</p>\n<p>Works with deferred content.</p>\n","inputs":[{"annotation":"Input","name":"canClose","bindingAlias":null,"type":"bool","comment":"","classPath":"angular_components/lib/app_layout/material_temporary_drawer.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"visible","bindingAlias":null,"type":"bool","comment":"<p>Visibility of the drawer.</p>\n","classPath":"angular_components/lib/app_layout/material_drawer_base.dart","deprecated":false,"deprecatedMessage":null}],"outputs":[{"annotation":"Output","name":"contentVisible","bindingAlias":"visibleChange","type":"Stream<bool>","comment":"<p>Event fired when the visibility of the drawer changes.</p>\n<p>Note: does not fire until after the animation is complete.</p>\n","classPath":"angular_components/lib/app_layout/material_drawer_base.dart","deprecated":false,"deprecatedMessage":null}]},{"docType":"DocType.dartDocInfo","name":"MaterialStackableDrawerComponent","deprecated":false,"deprecatedMessage":null,"selector":"material-drawer[stackable]","exportAs":null,"path":"angular_components/lib/app_layout/material_stackable_drawer.dart","comment":"<p>A stackable temporary drawer that can be opened and closed.</p>\n<p>While a stackable drawer is open any existing stackable drawer will be\nexpanded to fill the screen in the background.</p>\n<p>Works with deferred content.</p>\n","inputs":[{"annotation":"Input","name":"canClose","bindingAlias":null,"type":"bool","comment":"","classPath":"angular_components/lib/app_layout/material_temporary_drawer.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"isExpanded","bindingAlias":null,"type":"bool","comment":"<p>'True' when the drawer is expanded to full screen.</p>\n","classPath":"angular_components/lib/app_layout/material_stackable_drawer.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"visible","bindingAlias":null,"type":"bool","comment":"<p>Visibility of the drawer.</p>\n","classPath":"angular_components/lib/app_layout/material_drawer_base.dart","deprecated":false,"deprecatedMessage":null}],"outputs":[{"annotation":"Output","name":"contentVisible","bindingAlias":"visibleChange","type":"Stream<bool>","comment":"<p>Event fired when the visibility of the drawer changes.</p>\n<p>Note: does not fire until after the animation is complete.</p>\n","classPath":"angular_components/lib/app_layout/material_drawer_base.dart","deprecated":false,"deprecatedMessage":null}]}],"demos":[{"type":"MaterialDrawerExample","name":"MaterialDrawerExample","selector":"mat-drawer-demo","asset":"app_layout_example|lib/app_layout_example.dart"},{"type":"MaterialDrawerMobileExample","name":"MaterialDrawerMobileExample","selector":"mat-drawer-mobile-demo","asset":"app_layout_example|lib/mobile_app_layout_example.dart"},{"type":"MaterialStackingDrawerExample","name":"MaterialStackingDrawerExample","selector":"mat-stacking-drawer-demo","asset":"app_layout_example|lib/stacking_drawer_example.dart"}],"mainDemo":null,"benchmarks":null,"owners":null,"uxOwners":null,"relatedUrls":{"Material Spec (Drawer)":"https://material.io/design/components/navigation-drawer.html","Material Spec (App Bar)":"https://material.io/design/components/app-bars-top.html"},"showGeneratedDocs":true}]