[{"displayName":"Material Button","group":null,"docs":[{"docType":"DocType.dartDocInfo","name":"MaterialButtonComponent","deprecated":false,"deprecatedMessage":null,"selector":"material-button","exportAs":null,"path":"angular_components/lib/material_button/material_button.dart","comment":"<p>A flat or raised button with an optional ripple effect.</p>\n<p><strong>Attributes:</strong></p>\n<p>The following attributes are commonly used with <code>&lt;material-button&gt;</code>:</p><ul><li><code>icon</code>: If present, removes the minimum width style of the button.\nTo specify the actual icon in the button, use a <code>&lt;glyph&gt;</code>,\n<code>&lt;material-icon&gt;</code>, or <code>&lt;img&gt;</code>.</li><li><code>no-ink</code>: If present, removes the ripple effect from the button.</li><li><code>clear-size</code>: If present, removes both <code>min-width</code> and <code>margin</code> from\nthe button.</li><li><code>dense</code>: If present, reduces <code>font-size</code> to 13px and button height to\n32px.</li></ul>\n<p><strong>Styling:</strong></p>\n<p>The preferred way of specifying button colors is to use mixins:</p>\n<pre><code>/* Make #myButton green with yellow text */\n@include button-background-color('#myButton', green);\n@include button-color('#myButton', yellow);\n</code></pre>\n<p>The advantage of using mixins for color is that they will not overwrite the\ndisabled state colors. You can also style the button with CSS as you would a\nnormal DOM element, although this will also affect the disabled state:</p>\n<pre><code>/* Make #myButton green with yellow text */\n#myButton {\n  background: green;\n  color: yellow;\n}\n</code></pre>\n<p>By default the ripple is the same color as the foreground at 25% opacity.\nTo customize the color, use the <code>material-ripple</code> selector:</p>\n<pre><code>/* Make #myButton use a blue ripple instead of foreground color */\n#myButton material-ripple {\n  color: blue;\n}\n</code></pre>\n<p>The opacity of the ripple is not customizable via CSS.</p>\n<p><strong>See also:</strong></p>\n<p>Examples:</p><ul><li><a href=\"https://github.com/dart-lang/io_2017_components_codelab/tree/master\">dart-lang/io_2017_components_codelab repo</a></li></ul>\n<p>Other resources:</p><ul><li><a href=\"https://codelabs.developers.google.com/codelabs/your-first-angulardart-web-app/\">Material design codelab</a></li></ul>\n","inputs":[{"annotation":"Input","name":"disabled","bindingAlias":null,"type":"bool","comment":"<p>Is the component disabled.</p>\n","classPath":"angular_components/lib/button_decorator/button_decorator.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"raised","bindingAlias":null,"type":"bool","comment":"<p>Is <code>true</code> if the button should have a box shadow that makes the button look\nraised.</p>\n","classPath":"angular_components/lib/material_button/material_button_base.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"role","bindingAlias":null,"type":"String","comment":"<p>Role of this component used for a11y.</p>\n","classPath":"angular_components/lib/button_decorator/button_decorator.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"tabbable","bindingAlias":null,"type":"bool","comment":"<p>Is the component tabbable.</p>\n","classPath":"angular_components/lib/button_decorator/button_decorator.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"tabindex","bindingAlias":null,"type":"String","comment":"<p>The tab index of the component.</p>\n<p>The value is used if <code>tabbable</code> is <code>true</code> and <code>disabled</code> is <code>false</code>.</p>\n","classPath":"angular_components/lib/button_decorator/button_decorator.dart","deprecated":false,"deprecatedMessage":null}],"outputs":[{"annotation":"Output","name":"trigger","bindingAlias":null,"type":"Stream<UIEvent>","comment":"<p>Fired when the button is activated via click, tap, or key press.</p>\n","classPath":"angular_components/lib/button_decorator/button_decorator.dart","deprecated":false,"deprecatedMessage":null}]},{"docType":"DocType.dartDocInfo","name":"MaterialFabComponent","deprecated":false,"deprecatedMessage":null,"selector":"material-fab","exportAs":null,"path":"angular_components/lib/material_button/material_fab.dart","comment":"<p>Material FAB is a Floating Action Button. It is round, and behaves mostly\nthe same as a MaterialButton.</p>\n<p>It may be flat or raised. A raised button is styled with a shadow.</p>\n<p><strong>Styling:</strong></p>\n<p>The preferred way of specifying FAB colors is to use mixins:</p>\n<pre><code>/* Make #myButton green with yellow icon */\n@include button-background-color('#myButton', green);\n@include icon-button-color('#myButton', yellow);\n</code></pre>\n<p>The advantage of using mixins for color is that they will not overwrite the\ndisabled state colors. You can also style the FAB with CSS as you would a\nnormal DOM element, although this will also affect the disabled state:</p>\n<pre><code>/* Make #myButton green with yellow icon */\n#myButton {\n  background: green;\n  color: yellow;\n}\n</code></pre>\n<p>By default the ripple is the same color as the foreground at 25% opacity.\nYou may customize the color using this selector:</p>\n<pre><code>/* Make #myButton use a blue ripple instead of foreground color */\n#myButton material-ripple {\n  color: blue;\n}\n</code></pre>\n<p>The opacity of the ripple is not customizable via CSS.</p>\n","inputs":[{"annotation":"Input","name":"disabled","bindingAlias":null,"type":"bool","comment":"<p>Is the component disabled.</p>\n","classPath":"angular_components/lib/button_decorator/button_decorator.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"raised","bindingAlias":null,"type":"bool","comment":"<p>Is <code>true</code> if the button should have a box shadow that makes the button look\nraised.</p>\n","classPath":"angular_components/lib/material_button/material_button_base.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"role","bindingAlias":null,"type":"String","comment":"<p>Role of this component used for a11y.</p>\n","classPath":"angular_components/lib/button_decorator/button_decorator.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"tabbable","bindingAlias":null,"type":"bool","comment":"<p>Is the component tabbable.</p>\n","classPath":"angular_components/lib/button_decorator/button_decorator.dart","deprecated":false,"deprecatedMessage":null},{"annotation":"Input","name":"tabindex","bindingAlias":null,"type":"String","comment":"<p>The tab index of the component.</p>\n<p>The value is used if <code>tabbable</code> is <code>true</code> and <code>disabled</code> is <code>false</code>.</p>\n","classPath":"angular_components/lib/button_decorator/button_decorator.dart","deprecated":false,"deprecatedMessage":null}],"outputs":[{"annotation":"Output","name":"trigger","bindingAlias":null,"type":"Stream<UIEvent>","comment":"<p>Fired when the button is activated via click, tap, or key press.</p>\n","classPath":"angular_components/lib/button_decorator/button_decorator.dart","deprecated":false,"deprecatedMessage":null}]}],"demos":[{"type":"MaterialButtonExample","name":"MaterialButtonExample","selector":"material-button-example","asset":"material_button_example|lib/material_button_example.dart"}],"mainDemo":null,"benchmarks":null,"owners":null,"uxOwners":null,"relatedUrls":null,"showGeneratedDocs":true}]